package Aplicacion;

import java.awt.BorderLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import java.awt.Color;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.ImageIcon;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import General.GameObject;
import General.Logica;
import Proyectil.Proyectil;
import Tanque.Enemigo;
import javax.swing.SwingConstants;
import java.awt.Font;
import java.awt.Image;

public class GUI implements KeyListener,Runnable  {
	
	private static Logica Juego;
	private JFrame ventana;
	private static JPanel frame;
	private static int tamanio_celda=32;
	private static JLabel lblPuntos=new JLabel("Puntos : ");
	private static JLabel explosion=new JLabel();		
	/**
	 * Launch the application.
	 */
	
			public void run() {
				
					GUI window = new GUI();
					window.ventana.setVisible(true);
						
			}
		
		
	
	/**
	 * Create the application.
	 */
	public GUI() {
		Juego=new Logica();	
		initialize();
		refreshGUI();
	}

	
	/**
	 * Initialize the contents of the frame.
	 */
	
	private void initialize() {
		
		//Creacion del Frame
		
		ventana = new JFrame();
		ventana.setForeground(Color.GRAY);
		ventana.setBounds(100,100,700,700); //560,580
		ventana.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		ventana.getContentPane().setLayout(null);	
		ventana.getContentPane().setBackground(Color.DARK_GRAY);
		//Registramos Oyente Teclas
		ventana.addKeyListener(this);

		frame = new JPanel();
		frame.setLayout(null);	
		frame.setBackground(Color.BLACK);
		frame.setBounds(tamanio_celda,tamanio_celda, 19*tamanio_celda, 19*tamanio_celda);
		ventana.getContentPane().add(frame,BorderLayout.CENTER);
		lblPuntos.setHorizontalAlignment(SwingConstants.LEFT);
		
		
		lblPuntos.setForeground(Color.WHITE);
		lblPuntos.setFont(new Font("Tahoma", Font.PLAIN, 12));
		lblPuntos.setBounds(546, 11, 94, 14);
		ventana.getContentPane().add(lblPuntos);
	
		
		// Se agregan todos los labels inicializados 
		crearMapa();
		// Agregamos el Jugador
		frame.add(Juego.getJugador().getGrafico());
		
		explosion.setIcon(new ImageIcon(new ImageIcon("src/Aplicacion/resources/Impacto.png").getImage().getScaledInstance(tamanio_celda,tamanio_celda, Image.SCALE_SMOOTH)));

		frame.add(explosion);
		
	}
	
	public void refreshGUI(){	
		frame.repaint();
		lblPuntos.setText("Puntos : "+Juego.getPuntos());
	}
	

	public void crearMapa(){
		GameObject[][] mapa=Juego.getMapa();
		
		for(int f=0;f<mapa.length;f++){
			for(int c=0;c<mapa.length;c++){	
				frame.add(mapa[f][c].getGrafico());
			}
		}
		
		for(Enemigo e :Juego.getEnemigos()){
			frame.add(e.getGrafico());
		}
		
		Thread t1= new Thread(Juego); 
		t1.start();
	}


	public void keyPressed(KeyEvent e) {
		
		switch(e.getKeyCode()){
		case (KeyEvent.VK_UP):{ 
			playMover();
			Juego.mover(1); 
			break;
			}
		case (KeyEvent.VK_DOWN):{
			playMover();
			Juego.mover(2);
			break;
			}
		case (KeyEvent.VK_RIGHT):{
			playMover();
			Juego.mover(3);
			break;
			}
		case (KeyEvent.VK_LEFT):{
			playMover();
			Juego.mover(4);
			break;
			}
		case(KeyEvent.VK_F):{
			if(Juego.getSimultaneoJugador()>=0){
				Proyectil p=Juego.getJugador().disparar();
				agregarDisparo(p);
				Juego.getProyectiles().addLast(p);
				playDisparo();
			}
			break;
		} 
		case(KeyEvent.VK_T):{
			Juego.terminar();
		} 
		}
		refreshGUI();
	}

	
	public static void agregarDisparo(Proyectil p) {
		frame.add(p.getGrafico());
		System.out.println(""+p.getPath());
	}

	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
	}
	
	public static synchronized void mostrarImpacto(float x,float y) {
		  new Thread(new Runnable() {
		    public void run() {
		      try {
		  		explosion.setIcon(new ImageIcon(new ImageIcon("src/Aplicacion/resources/Impacto.png").getImage().getScaledInstance(tamanio_celda,tamanio_celda, Image.SCALE_SMOOTH)));
		    	explosion.setBounds((int)(tamanio_celda*x),(int)(tamanio_celda*y),tamanio_celda,tamanio_celda);
		  		explosion.repaint();
		      } catch (Exception e) {
		        System.err.println(e.getMessage());
		      }
		    }
		  }).start();
	}
	
	public static synchronized void playMotor() {
		  new Thread(new Runnable() {
		  // The wrapper thread is unnecessary, unless it blocks on the
		  // Clip finishing; see comments.
		    public void run() {
		      try {
		        Clip clip = AudioSystem.getClip();
		        File archivo=new File("src/Aplicacion/resources/Sonido/tanque_quieto.au");
		        AudioInputStream inputStream = AudioSystem.getAudioInputStream(archivo);		        clip.open(inputStream);
		        clip.start(); 
		      } catch (Exception e) {
		        System.err.println(e.getMessage());
		      }
		    }
		  }).start();
	}
	
	public static synchronized void playIntro() {
		  new Thread(new Runnable() {
		  // The wrapper thread is unnecessary, unless it blocks on the
		  // Clip finishing; see comments.
		    public void run() {
		      try {
		        Clip clip = AudioSystem.getClip();
		        File archivo=new File("src/Aplicacion/resources/Sonido/intro.au");
		        AudioInputStream inputStream = AudioSystem.getAudioInputStream(archivo);		        clip.open(inputStream);
		        clip.start(); 
		      } catch (Exception e) {
		        System.err.println(e.getMessage());
		      }
		    }
		  }).start();
	}
	
	public static synchronized void playDisparo() {
		  new Thread(new Runnable() {
		  // The wrapper thread is unnecessary, unless it blocks on the
		  // Clip finishing; see comments.
		    public void run() {
		      try {
		        Clip clip = AudioSystem.getClip();
		        File archivo=new File("src/Aplicacion/resources/Sonido/disparo.au");
		        AudioInputStream inputStream = AudioSystem.getAudioInputStream(archivo);		        clip.open(inputStream);
		        clip.start(); 
		      } catch (Exception e) {
		        System.err.println(e.getMessage());
		      }
		    }
		  }).start();
	}
	
	public static synchronized void playMover() {
		  new Thread(new Runnable() {
		  // The wrapper thread is unnecessary, unless it blocks on the
		  // Clip finishing; see comments.
		    public void run() {
		      try {
		        Clip clip = AudioSystem.getClip();
		        File archivo=new File("src/Aplicacion/resources/Sonido/mover.au");
		        AudioInputStream inputStream = AudioSystem.getAudioInputStream(archivo);		        clip.open(inputStream);
		        clip.start(); 
		      } catch (Exception e) {
		        System.err.println(e.getMessage());
		      }
		    }
		  }).start();
		}
	
	
	

	
}
