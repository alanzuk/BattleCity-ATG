package General;

import java.text.DecimalFormat;
import java.util.*;
import Aplicacion.GUI;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.math.RoundingMode;
import Obstaculo.Agua;
import Obstaculo.Aguila;
import Obstaculo.Cemento;
import Obstaculo.Ladrillo;
import Obstaculo.Limite;
import Obstaculo.Obstaculo;
import Obstaculo.Vacio;
import Poderes.*;
import Proyectil.Proyectil;
import Tanque.Blindado;
import Tanque.Enemigo;
import Tanque.Jugador;
import Tanque.Rapido;
import Tanque.Tanque;

public class Logica implements Runnable{
	
	/**
	 * Listas del Juego y atributos 
	 */
	
	protected static volatile LinkedList<Enemigo> misEnemigos;
	protected LinkedList<GameObject> misObstaculos;
	protected volatile LinkedList<Proyectil> misProyectiles;
	protected volatile LinkedList<Proyectil> misProyectilesEnemigos;
	protected int iteracion=0;
	protected int oleada=1;
	protected static Jugador miJugador;
	protected GameObject[][] mapa;
	protected Powerup[] miPowerup;
	protected static int puntos;
	protected volatile static boolean seguir=true;
	protected volatile static boolean pausa=false;
	private static int reloj=75;
	protected int enemigosRestantes;
	
	public Logica(){
		
		misEnemigos= new LinkedList<Enemigo>();
		misObstaculos=new LinkedList<GameObject>();
		misProyectiles = new LinkedList<Proyectil>();
		misProyectilesEnemigos = new LinkedList<Proyectil>();
		miPowerup= new Powerup[6];
		miJugador=new Jugador(7,17);
		enemigosRestantes=16;
	
		/**
		 * Creacion del tablero de juego
		 */
		
		mapa=new GameObject[19][19];
		
		/**
		 * Se carga el archivo con el contenido del nivel. 
		 */
	
		File a= new File("src/Aplicacion/Nivel1.txt");
		
		try{
			FileReader fr= new FileReader(a);
			BufferedReader br= new BufferedReader(fr);
			String s;
						
			for(int f=0;f<19;f++){
				s=br.readLine();
				for(int c=0; c<19;c++){
					char tipo=s.charAt(c);
					crearGameObject(c,f,tipo); 
				}	
			}
			br.close();
		}
		catch(IOException e){e.printStackTrace();}
		
	}
	
	/**
	 * Realiza la creacion del GameObject concreto y lo coloca en el tablero.
	 */
	
	private void crearGameObject(int f, int c, char tipo) {
		switch(tipo){
			case 'P' :{
				mapa[f][c]=new Limite(f,c);
				break;
			}
			case 'a' :{ mapa[f][c]=new Agua(f,c); 
					misObstaculos.addLast((Obstaculo)mapa[f][c]);
					break;
			}
			case 'l' :{ mapa[f][c]=new Ladrillo(f,c);
					misObstaculos.addLast((Obstaculo)mapa[f][c]);
					break;
			}
			case 'c' :{ mapa[f][c]=new Cemento(f,c);
					misObstaculos.addLast((Obstaculo)mapa[f][c]);
					break;
			}
			case ' ' :{ mapa[f][c]=new Vacio(f,c); 
					break;
			}
			case 'e' :{ mapa[f][c]=new Vacio(f,c); 
					break;
			}
			case 'x' :{ mapa[f][c]=new Aguila(f,c); 
					break;
			}
			case 'r' :{ mapa[f][c]=new Rapido(f,c); 
					break;
			}
			case 'j' :{ mapa[f][c]=new Vacio(f,c); 
					break;
			}
		}
	}

	/**
	 * Consultas utilizadas por la parte grafica del Juego 
	 */
	
	public Tanque getJugador(){
		return miJugador;
	}
	
	public GameObject[][] getMapa(){
		return mapa;
	}
	
	public LinkedList<Proyectil> getProyectiles(){
		return misProyectiles;
	}
	
	public LinkedList<GameObject> getObstaculos() {
		return misObstaculos;
	}
	
	public LinkedList<Enemigo> getEnemigos() {
		return  misEnemigos;
	}
	
	public int getPuntos(){
		return puntos;
	}
	
	public int getEnemigosRestantes(){
		return enemigosRestantes;
	}
	
	/**
	 * Comandos ultilizados por la parte grafica del Juego 
	 */
	
	public static void terminar(){
		seguir=false;
	}
	
	public void mover(int i) {
		if(!pausa){
			if(caminoLibre(miJugador))
				miJugador.mover(i);
			else
				miJugador.setDireccion(i);
		}
	}
		
	public void gameOver(){
		
	}
	
	
	/**
	 * Hilo de ejecucion de la parte logica . 
	 * Es el encargado de movimiento de enemigos , disparos y aparciones de powerups
	 */
	
	public synchronized void run(){
		while(seguir){
			if(!pausa){
			try{
				
				iteracion++;
				if(iteracion % 10 ==0)
					GUI.refreshGUI();
				
				if(misEnemigos.isEmpty()) // Al llegar a la oleada 4 se avanza de nivel.
					nuevaOleada();
				else{
					//Revisar los disparos del jugador con el resto del mapa.
					dispararEnemigos();
					check_disparosEnemigo();
					moverEnemigos();
				}
				//Se controla la lista de los disparos de el Jugador.
				check_disparosJugador();

				Thread.sleep(reloj);
				
			}catch(InterruptedException  e){}
			catch(ConcurrentModificationException e1){}
		  }
	   }
	}
	
	private void debbug(){
		
		System.out.println("===== TANQUES ======");
		System.out.println("===== N :"+iteracion+" ======");
		int i=1;
		for(Enemigo e: misEnemigos){
			System.out.println("Tanque "+i+" - Simultaneos : "+e.getSimultaneo());
			i++;
		}
		System.out.println("===========================");
		System.out.println("===== PROYECTILES ======");
		System.out.println("===== N :"+iteracion+" ======");
		i=1;
		for(Proyectil p: misProyectilesEnemigos){
			System.out.println("Proyectil "+i+" - Vidas : "+p.getVida());
		}
		System.out.println("===========================");
		iteracion++;
		
		
	}
	
	/**
	 * Cuando la lista "misEnemgios" esta vacia , se hace la reaparicion de los enemigos.
	 */
	
	private void nuevaOleada() {
		if(oleada==1){
			oleada++;
			misEnemigos.addLast(new Blindado(0,0)); // Si no se hace esto no inserta
			misEnemigos.addLast(new Blindado(1,1));
			misEnemigos.addLast(new Blindado(7,1));
			misEnemigos.addLast(new Blindado(11,1));
			misEnemigos.addLast(new Blindado(17,1));
		}else
			if(oleada==2){
				oleada++;
				misEnemigos.add(new Rapido(1,1));
				misEnemigos.add(new Rapido(7,1));
				misEnemigos.add(new Rapido(11,1));
				misEnemigos.add(new Rapido(17,1));
			}
		
		GUI.actualizarListaEnemigos(misEnemigos);
	}
	
	public int getSimultaneoJugador(){
		return miJugador.getSimultaneo();
	}
	
	public void eliminarEnemigo(Enemigo g){
		enemigosRestantes--;
		for(Enemigo e : misEnemigos){
			if(e==g){
				puntos+=g.morir();
				if(puntos==1200) 
					miJugador.subirNivel();
				g=null;							
			}
			break;
		}
	}
	
	public void eliminarProyectil(Proyectil g){		
		boolean seguir=true;
		for(Proyectil e : misProyectiles){
			if(e==g){
				if(!misProyectiles.isEmpty()){
					seguir=false;
					g.morir();
					g=null;	
					break;
				}
			}
			break;
		}
		
		if(seguir){			
			for(Proyectil e : misProyectilesEnemigos){
				if(e==g){
					if(!misProyectilesEnemigos.isEmpty()){
						g.morir();
						g=null;	
						break;
					}
				}
				break;
			}
		}
	}
	
	//Los powerUps tambien son eliminados con este metodo.
	
	public void eliminarObstaculo(GameObject g){
		for(GameObject e : misObstaculos){
			if(e==g){
				if(!misObstaculos.isEmpty()){
					g.morir();
					float x=g.getX();
					float y=g.getY();
					mapa[(int)x][(int)y]=new Vacio((int)x,(int)y);
					g=null;		
					break;
				}
			}
		}
					
	}

	//Metodos privados que utilizan listas
	
	private void check_disparosJugador(){
		
		Iterator<Proyectil> itProyectil=misProyectiles.iterator();
		 Proyectil p;
		 while(itProyectil.hasNext()){
			 
			 p=itProyectil.next();
			
			 for(Enemigo e:misEnemigos){
				 
				if(cuentaInter(e, p)){
					p.afectar(e.getVisitante());
			 		e.afectar(p.getVisitante());
				}
				
			 }

			 if(p.getVida()>0){
				 if(caminoLibre(p)){
					 p.mover(p.getDireccion());
				 }
			 }
			 else{
				 if(p.getVida()==0){//Si la vida es igual a 0 entonces debo eliminar algo 
					p.getTanqueDisparador().setSimultaneo();
					eliminarProyectil(p);
				 	itProyectil.remove();
				 	//ELIMINO OBSTACULOS 
				 	Iterator<GameObject> itObstaculo=misObstaculos.iterator();
				 	GameObject o;
				 	while(itObstaculo.hasNext()){
				 		o=itObstaculo.next();
				 		if(o.getVida()==0){
				 			eliminarObstaculo(o);
				 			itObstaculo.remove();
				 		}
				 	}
				 	//ELIMINO ENEMIGO 
				 	Iterator<Enemigo> itEnemigo=misEnemigos.iterator();
				 	Enemigo e;
				 	while(itEnemigo.hasNext()){
				 		e=itEnemigo.next();
				 		if(e.getVida()==0){
				 			eliminarEnemigo(e);
				 			itEnemigo.remove();
				 			misEnemigos.remove(e);
				 			break;
				 		}
				 	}
				 } 
			 
			 }
		}
	}
	
    public void subirNivel(){
    		miJugador.subirNivel();
    }

	public void pausa() {
		if(pausa)
			pausa=false;
		else
			pausa=true;
	}
	
	/**
	 * Metodos que se encargan de los movimientos de los enemigos y proyectiles
	 * Asi tambien de las colisiones entre las listas y el tablero.
	 */
	
	private void dispararEnemigos(){
		for(Enemigo e: misEnemigos){
			if(e.getSimultaneo()==1){
				Proyectil pe=e.disparar();
				if(pe!=null){
					 misProyectilesEnemigos.addLast(pe);
					 GUI.agregarDisparo(pe);
				}
		    }
	   }
	}
	
	private void check_disparosEnemigo(){
		
		Iterator<Proyectil> itProyectil=misProyectilesEnemigos.iterator();
		 Proyectil p;
		 while(itProyectil.hasNext()){
			 
			 p=itProyectil.next();
							 
				if(cuentaInter(miJugador, p)){
					p.afectar(miJugador.getVisitante());
					miJugador.afectar(p.getVisitante());
				}
				
			 if(p.getVida()>0){
				 if(caminoLibre(p))
					 p.mover(p.getDireccion());
			 }
			 else{
				 if(p.getVida()==0){//Si la vida es igual a 0 entonces debo eliminar algo 
					p.getTanqueDisparador().setSimultaneo();
					eliminarProyectil(p);
				 	itProyectil.remove();
				 	//ELIMINO OBSTACULOS 
				 	Iterator<GameObject> itObstaculo=misObstaculos.iterator();
				 	GameObject o;
				 	while(itObstaculo.hasNext()){
				 		o=itObstaculo.next();
				 		if(o.getVida()==0){
				 			eliminarObstaculo(o);
				 			itObstaculo.remove();
				 		}
				 	}
				 } 
			 }
		}
	}

	private void moverEnemigos() {
		for(Enemigo e:misEnemigos){
			 Random rnd= new Random();
			 if(caminoLibre(e)){
				e.mover(e.getDireccion());
			 }
			 else{
		    	 int nuevaDireccion= rnd.nextInt(4)+1;
			     while(e.getDireccion()==nuevaDireccion)
			    	 nuevaDireccion= rnd.nextInt(4)+1;
				 e.setDireccion(nuevaDireccion);
			}
			 e.refrescarPosicion();
		 }
	}
	
	private boolean cuentaInter(Movible t,Movible t1){
		float x1=t.getX();
		float y1=t.getY();
		float x2=t1.getX();
		float y2=t1.getY();
		boolean seChocan=false;
		float resX=x1-x2;
		float resY=y1-y2;
		if(1>resX && -1<resX && 1>resY && -1<resY ){
			seChocan=true;
		}
		
		return seChocan;
	}
	
	private boolean choqueEnemigo(Tanque v,float x ,float y){
		
		for(Enemigo e:misEnemigos){
			if(e!=v){
				if(cuentaInter(e,v)){
					int choqueFrente=v.getDireccion()+e.getDireccion();
					
					if(choqueFrente==3 || choqueFrente==7){
						v.afectar(e.getVisitante());
						e.afectar(v.getVisitante());
						return true;
					}
					else{
						e.afectar(v.getVisitante());
						return true;
				}
			}
		 }
			else 
				return false;
		}
		return false;
	}
	
	private boolean caminoLibre(Movible t) {
		try{
		int i=t.getDireccion();
		t.refrescarPosicion();
		float x=t.getX();
		float y=t.getY();
		int xI;
		int yI;
		boolean b=true;
		switch(i){
			case 1:{
				y-=0.2;
				xI=redondeoAbajo(x);
				yI=redondeoAbajo(y);
						t.refrescarPosicion();				 
				 		GameObject obj1=mapa[xI][yI];
				xI=redondeoArriba(x);
				yI=redondeoAbajo(y);
						GameObject obj2=mapa[xI][yI];
				 		b= t.colision(obj1, obj2);			
				 break;
			}
			case 2:{
				y+=0.2;
				xI=redondeoAbajo(x);
				yI=redondeoArriba(y);
			    		t.refrescarPosicion();	
				 		GameObject obj1=mapa[xI][yI];
				xI=redondeoArriba(x);
				yI=redondeoArriba(y);
						GameObject obj2=mapa[xI][yI];
				 		b= t.colision(obj1, obj2);
				 break;

			}
			case 3:{
				x+=0.2;
				xI=redondeoArriba(x);
				yI=redondeoAbajo(y);
							t.refrescarPosicion();				 
				 			GameObject obj1=mapa[xI][yI];
				xI=redondeoArriba(x);
				yI=redondeoArriba(y);
							GameObject obj2=mapa[xI][yI];
							b= t.colision(obj1, obj2);	 
				 break;
			}
			case 4:{
				x-=0.2;
				xI=redondeoAbajo(x);
				yI=redondeoArriba(y);
						t.refrescarPosicion();				 
				 		GameObject obj1=mapa[xI][yI];
				xI=redondeoAbajo(x);
				yI=redondeoAbajo(y);
				 		GameObject obj2=mapa[xI][yI];
				 		b= t.colision(obj1, obj2) ;
				break;
			}
		}
		return b;
		}
		catch(Exception e){
			return false;
		}
	}

	private int redondeoAbajo(float f){
		DecimalFormat df = new DecimalFormat("##");	
		df.setRoundingMode(RoundingMode.DOWN);
		String xIp;
		xIp=df.format(f); //down
		return Integer.parseInt(xIp);
		
	}
	
	private int redondeoArriba(float f){
		DecimalFormat dfY = new DecimalFormat("##");
		dfY.setRoundingMode(RoundingMode.CEILING);
		String yIp;
		yIp=dfY.format(f); //down 
		return Integer.parseInt(yIp);
	}
	
	
	/**
	 * POWERUPS
	 * Implementacion de los efectos y la aparicion.
	 */
	
	
	// Tecla 3
	public Component PonerVida() {
		Powerup c=new Vida(7,12);
		mapa[7][12]=c;
		misObstaculos.add(c);
		return c.getGrafico();
	}
	
	public static void powerupVida() {
		miJugador.addVida();
	}
	public static void powerupGranada() {
		for(Enemigo e :misEnemigos){
				puntos+=e.morir();
				misEnemigos.remove(e);
				if (puntos==1200)
					miJugador.subirNivel();
		}
	}
	
	public static void powerupReloj() {
		reloj=3000;
		GUI.reloj();
	}
	public Component PonerCasco() {
		Powerup c=new Casco(7,12);
		mapa[7][12]=c;
		return c.getGrafico();
	}
    
	public Component PonerReloj() {
		Powerup c=new Reloj(7,12);
		mapa[7][12]=c;

		return c.getGrafico();
	}
	
	public Component PonerGranada() {
		Powerup c=new Granada(7,12);
		mapa[7][12]=c;

		return c.getGrafico();
	}
	
	public Component PonerEstrella() {
		Powerup c=new Estrella(7,12);
		mapa[7][12]=c;

		return c.getGrafico();
	}
	
	public Component PonerPala() {
		Powerup c=new Pala(7,12);
		mapa[7][12]=c;

		return c.getGrafico();
	}
	
	
	
	
}
